name: 🚀 CI/CD for Spring Boot with Docker on EC2

on:
  push:
    branches:
      - local
      - qa
      - real

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: ✅ Checkout
      uses: actions/checkout@v4

    - name: 💌 Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: ⭕ Grant execute permission for gradlew
      run: chmod +x gradlew
      shell: bash

    - name: 🔺 Build with Gradle
      run: ./gradlew clean build -x test
      shell: bash

    - name: 📦 Rename JAR file based on branch
      run: |
        BRANCH_NAME=$(echo "${{ github.ref }}" | awk -F/ '{print $NF}')
        if [ "$BRANCH_NAME" == "local" ]; then
          mv build/libs/dokkabiV2-0.0.1-SNAPSHOT.jar build/libs/dokkabiV2-local.jar
        elif [ "$BRANCH_NAME" == "qa" ]; then
          mv build/libs/dokkabiV2-0.0.1-SNAPSHOT.jar build/libs/dokkabiV2-qa.jar
        elif [ "$BRANCH_NAME" == "real" ]; then
          mv build/libs/dokkabiV2-0.0.1-SNAPSHOT.jar build/libs/dokkabiV2-real.jar
        fi
      shell: bash

    - name: 🚀 Upload JAR file to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        target: /home/jinha/docker_setup/
        strip_components: 2
        source: |
          ${{ 
          github.ref_name == 'local' && 'build/libs/dokkabiV2-local.jar' ||
          github.ref_name == 'qa' && 'build/libs/dokkabiV2-qa.jar' ||
          github.ref_name == 'real' && 'build/libs/dokkabiV2-real.jar' 
          }}

    - name: 🌎 SSH into EC2 and deploy
      uses: appleboy/ssh-action@v0.1.8
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # 디렉토리 변경
          cd /home/jinha/docker_setup

          # MySQL 실행
          docker-compose -f docker-compose-mysql.yml up -d
          
          # 현재 브랜치에 따라 Docker 이미지 빌드
          if [ "${{ github.ref }}" == "refs/heads/local" ]; then
            docker build --build-arg JAR_FILE=dokkabiV2-local.jar -t dokkabi-v2-local . --no-cache
            docker-compose -f docker-compose.yml -f docker-compose.local.yml --env-file .env.local -p local down
            docker-compose -f docker-compose.yml -f docker-compose.local.yml --env-file .env.local -p local up -d
          elif [ "${{ github.ref }}" == "refs/heads/qa" ]; then
            docker build --build-arg JAR_FILE=dokkabiV2-qa.jar -t dokkabi-v2-qa . --no-cache
            docker-compose -f docker-compose.yml -f docker-compose.qa.yml --env-file .env.qa -p qa down
            docker-compose -f docker-compose.yml -f docker-compose.qa.yml --env-file .env.qa -p qa up -d
          elif [ "${{ github.ref }}" == "refs/heads/real" ]; then
            docker build --build-arg JAR_FILE=dokkabiV2-real.jar -t dokkabi-v2-real . --no-cache
            docker-compose -f docker-compose.yml -f docker-compose.real.yml --env-file .env.real -p real down
            docker-compose -f docker-compose.yml -f docker-compose.real.yml --env-file .env.real -p real up -d
          fi
          
          # 현재 실행 중인 컨테이너에서 사용되지 않는 이미지를 삭제
          docker image prune -f
